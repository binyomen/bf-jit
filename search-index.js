var searchIndex = JSON.parse('{\
"bench":{"doc":"","t":[17,17,17,3,17,14,5,11,11,11,11,5,5,12,12,11,14,5,11,11,11],"n":["ARCH_NAME","BENCH_DATA_DIR_NAME","DATA_FILE_PREFIX","ImplInfo","OS_NAME","arch_id","benchmark","borrow","borrow_mut","from","into","measure_results","measure_results_for_file","millis","name","new","os_id","output_data","try_from","try_into","type_id"],"q":["bench","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,6,6,6,6,0,0,6,6,6,0,0,6,6,6],"f":[0,0,0,0,0,0,[[1,2,1,1],[[5,[3,4]]]],[[]],[[]],[[]],[[]],[[],[[5,[4]]]],[[1,1,1,1],[[5,[4]]]],0,0,[[1,2,1,1],[[5,[6,4]]]],0,[[1,1],[[5,[4]]]],[[],5],[[],5],[[],7]],"p":[[15,"str"],[8,"RunFunction"],[15,"u128"],[4,"BfError"],[4,"Result"],[3,"ImplInfo"],[3,"TypeId"]]},\
"opinterp":{"doc":"","t":[0,5,0,13,13,13,13,4,13,13,3,13,13,11,11,11,11,5,11,11,11,11,11,11,12,11,11,12,5,11,11,11,11,11,11,17,5,5,5,5],"n":["parser","run","vm","DecData","DecPtr","IncData","IncPtr","Instruction","JumpIfNotZero","JumpIfZero","Program","Read","Write","borrow","borrow","borrow_mut","borrow_mut","create_jump_table","eq","eq","fmt","fmt","from","from","instructions","into","into","jump_table","parse","try_from","try_from","try_into","try_into","type_id","type_id","MEMORY_SIZE","jump","read","run","write"],"q":["opinterp","","","opinterp::parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","opinterp::vm","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[0,0,0,7,7,7,7,0,7,7,0,7,7,7,9,7,9,0,7,9,7,9,7,9,9,7,9,9,0,7,9,7,9,7,9,0,0,0,0,0],"f":[0,[[1,2,3],4],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[5,[[4,[[5,[6]]]]]],[[7,7],8],[[9,9],8],[[7,10],11],[[9,10],11],[[]],[[]],0,[[]],[[]],0,[1,[[4,[9]]]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,[[8,9,6,6],6],[2,[[4,[14]]]],[[9,2,3],4],[[3,14],4]],"p":[[15,"str"],[8,"Read"],[8,"Write"],[6,"BfResult"],[3,"Vec"],[15,"usize"],[4,"Instruction"],[15,"bool"],[3,"Program"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[15,"u8"]]},\
"opinterp2":{"doc":"","t":[0,5,0,13,13,13,13,13,13,13,13,4,13,13,13,13,4,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,5,11,5,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,17,5,5,5,5],"n":["parser","run","vm","DecData","DecData","DecPtr","DecPtr","IncData","IncData","IncPtr","IncPtr","Instruction","JumpIfNotZero","JumpIfNotZero","JumpIfZero","JumpIfZero","OpCode","Program","Read","Read","Write","Write","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","eq","eq","eq","fmt","fmt","from","from","from","instructions","into","into","into","parse","set_destination","translate_to_opcodes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","count","count","count","count","count","count","destination","destination","MEMORY_SIZE","jump","read","run","write"],"q":["opinterp2","","","opinterp2::parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","opinterp2::parser::Instruction","","","","","","","","opinterp2::vm","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,5,7,5,7,5,7,5,7,0,5,7,5,7,0,0,5,7,5,7,5,7,8,5,7,8,5,7,8,7,8,5,7,8,8,5,7,8,0,7,0,5,7,8,5,7,8,5,7,8,16,17,18,19,20,21,22,23,0,0,0,0,0],"f":[0,[[1,2,3],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[5,5],6],[[7,7],6],[[8,8],6],[[7,9],10],[[8,9],10],[[]],[[]],[[]],0,[[]],[[]],[[]],[1,[[4,[8]]]],[[7,11]],[1,[[12,[5]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],0,0,0,0,0,0,0,0,0,[[6,11,11,11],11],[2,[[4,[15]]]],[[8,2,3],4],[[3,15],4]],"p":[[15,"str"],[8,"Read"],[8,"Write"],[6,"BfResult"],[4,"OpCode"],[15,"bool"],[4,"Instruction"],[3,"Program"],[3,"Formatter"],[6,"Result"],[15,"usize"],[3,"Vec"],[4,"Result"],[3,"TypeId"],[15,"u8"],[13,"IncPtr"],[13,"DecPtr"],[13,"IncData"],[13,"DecData"],[13,"Read"],[13,"Write"],[13,"JumpIfZero"],[13,"JumpIfNotZero"]]},\
"opinterp3":{"doc":"","t":[0,5,0,4,3,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,3,13,13,13,13,13,13,11,11,11,11,11,11,11,11,12,5,5,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,17,5,5,5,5],"n":["parser","run","vm","AstNode","AstSeq","DecData","DecData","DecPtr","DecPtr","IncData","IncData","IncPtr","IncPtr","Instruction","JumpBegin","JumpEnd","Loop","MoveData","MoveData","MovePtrUntilZero","MovePtrUntilZero","Program","Read","Read","SetDataToZero","SetDataToZero","Write","Write","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","children","compile","create_ast","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","instructions","into","into","into","into","optimize_loops","parse","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","amount","amount","forward","forward","seq","amount","amount","count","count","count","count","count","count","count","count","destination","destination","forward","forward","MEMORY_SIZE","jump","read","run","write"],"q":["opinterp3","","","opinterp3::parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","opinterp3::parser::AstNode","","","","","opinterp3::parser::Instruction","","","","","","","","","","","","","","opinterp3::vm","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,8,6,8,6,8,6,8,6,0,6,6,8,8,6,8,6,0,8,6,8,6,8,6,8,5,6,10,8,5,6,10,5,0,0,8,5,6,10,8,5,6,10,8,5,6,10,10,8,5,6,10,0,0,8,5,6,10,8,5,6,10,8,5,6,10,17,18,17,18,19,20,21,22,23,24,25,26,27,20,21,28,29,20,21,0,0,0,0,0],"f":[0,[[1,2,3],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[5,[[7,[6]]]],[1,[[4,[5]]]],[[8,8],9],[[5,5],9],[[6,6],9],[[10,10],9],[[8,11],12],[[5,11],12],[[6,11],12],[[10,11],12],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[5,5],[1,[[4,[10]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[9,15,15,15],15],[2,[[4,[16]]]],[[10,2,3],4],[[3,16],4]],"p":[[15,"str"],[8,"Read"],[8,"Write"],[6,"BfResult"],[3,"AstSeq"],[4,"Instruction"],[3,"Vec"],[4,"AstNode"],[15,"bool"],[3,"Program"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[15,"usize"],[15,"u8"],[13,"MovePtrUntilZero"],[13,"MoveData"],[13,"Loop"],[13,"MovePtrUntilZero"],[13,"MoveData"],[13,"IncPtr"],[13,"DecPtr"],[13,"IncData"],[13,"DecData"],[13,"Read"],[13,"Write"],[13,"JumpBegin"],[13,"JumpEnd"]]},\
"opjit":{"doc":"","t":[0,0,5,5,4,3,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,3,13,13,13,13,13,13,11,11,11,11,11,11,11,11,12,5,5,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"n":["compiler","parser","run","compile","AstNode","AstSeq","DecData","DecData","DecPtr","DecPtr","IncData","IncData","IncPtr","IncPtr","Instruction","JumpBegin","JumpEnd","Loop","MoveData","MoveData","MovePtrUntilZero","MovePtrUntilZero","Program","Read","Read","SetDataToZero","SetDataToZero","Write","Write","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","children","compile","create_ast","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","instructions","into","into","into","into","optimize_loops","parse","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","amount","amount","forward","forward","seq","amount","amount","count","count","count","count","count","count","count","count","forward","forward"],"q":["opjit","","","opjit::compiler","opjit::parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","opjit::parser::AstNode","","","","","opjit::parser::Instruction","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,11,9,11,9,11,9,11,9,0,9,9,11,11,9,11,9,0,11,9,11,9,11,9,11,8,9,5,11,8,9,5,8,0,0,11,8,9,5,11,8,9,5,11,8,9,5,5,11,8,9,5,0,0,11,8,9,5,11,8,9,5,11,8,9,5,17,18,17,18,19,20,21,22,23,24,25,26,27,20,21,20,21],"f":[0,0,[[1,2,3],4],[[5,6],[[4,[7]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[8,[[10,[9]]]],[1,[[4,[8]]]],[[11,11],12],[[8,8],12],[[9,9],12],[[5,5],12],[[11,13],14],[[8,13],14],[[9,13],14],[[5,13],14],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[8,8],[1,[[4,[5]]]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"p":[[15,"str"],[8,"Read"],[8,"Write"],[6,"BfResult"],[3,"Program"],[3,"Runtime"],[3,"CompiledProgram"],[3,"AstSeq"],[4,"Instruction"],[3,"Vec"],[4,"AstNode"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[13,"MovePtrUntilZero"],[13,"MoveData"],[13,"Loop"],[13,"MovePtrUntilZero"],[13,"MoveData"],[13,"IncPtr"],[13,"DecPtr"],[13,"IncData"],[13,"DecData"],[13,"Read"],[13,"Write"]]},\
"simpleinterp":{"doc":"","t":[0,5,0,13,13,13,13,4,13,13,3,13,13,11,11,11,11,11,11,11,11,11,11,12,11,11,5,11,11,11,11,11,11,17,5,5,5,5],"n":["parser","run","vm","DecData","DecPtr","IncData","IncPtr","Instruction","JumpIfNotZero","JumpIfZero","Program","Read","Write","borrow","borrow","borrow_mut","borrow_mut","eq","eq","fmt","fmt","from","from","instructions","into","into","parse","try_from","try_from","try_into","try_into","type_id","type_id","MEMORY_SIZE","jump","read","run","write"],"q":["simpleinterp","","","simpleinterp::parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","simpleinterp::vm","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,0,0,5,5,5,5,0,5,5,0,5,5,5,7,5,7,5,7,5,7,5,7,7,5,7,0,5,7,5,7,5,7,0,0,0,0,0],"f":[0,[[1,2,3],4],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[5,5],6],[[7,7],6],[[5,8],9],[[7,8],9],[[]],[[]],0,[[]],[[]],[1,7],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],0,[[6,7,12,12],4],[2,[[4,[13]]]],[[7,2,3],4],[[3,13],4]],"p":[[15,"str"],[8,"Read"],[8,"Write"],[6,"BfResult"],[4,"Instruction"],[15,"bool"],[3,"Program"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[15,"usize"],[15,"u8"]]},\
"simplejit":{"doc":"","t":[0,0,5,5,13,13,13,13,4,13,13,3,13,13,11,11,11,11,11,11,11,11,11,11,12,11,11,5,11,11,11,11,11,11],"n":["compiler","parser","run","compile","DecData","DecPtr","IncData","IncPtr","Instruction","JumpIfNotZero","JumpIfZero","Program","Read","Write","borrow","borrow","borrow_mut","borrow_mut","eq","eq","fmt","fmt","from","from","instructions","into","into","parse","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["simplejit","","","simplejit::compiler","simplejit::parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,8,8,8,8,0,8,8,0,8,8,8,5,8,5,8,5,8,5,8,5,5,8,5,0,8,5,8,5,8,5],"f":[0,0,[[1,2,3],4],[[5,6],[[4,[7]]]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[8,8],9],[[5,5],9],[[8,10],11],[[5,10],11],[[]],[[]],0,[[]],[[]],[1,[[4,[5]]]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13]],"p":[[15,"str"],[8,"Read"],[8,"Write"],[6,"BfResult"],[3,"Program"],[3,"Runtime"],[3,"CompiledProgram"],[4,"Instruction"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"util":{"doc":"","t":[13,13,4,6,13,13,0,14,0,0,0,12,12,12,12,6,6,3,3,17,3,17,12,11,11,11,11,11,11,12,5,5,12,5,11,11,11,11,11,11,11,5,5,12,11,11,11,5,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,13,13,4,6,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,5,5,8,5],"n":["Assembler","Bf","BfError","BfResult","Io","TryFromInt","asm","dasm","error","math","run","0","0","0","0","AsmEntryPoint","Assembler","CompiledProgram","LabelPair","MEMORY_SIZE","Runtime","STACK_OFFSET","begin_label","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffer","call_read","call_write","end_label","epilogue","from","from","from","function_ptr","into","into","into","jump_begin","jump_end","memory","memory_ptr","new","new","prologue","read","read_inner","run","start","stdin","stdout","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write_inner","Assembler","Bf","BfError","BfResult","Io","TryFromInt","borrow","borrow_mut","eq","fmt","fmt","from","from","from","from","into","provide","to_string","try_from","try_into","type_id","0","0","0","0","unbalanced_wrapping_add","unbalanced_wrapping_sub","RunFunction","run_main"],"q":["util","","","","","","","","","","","util::BfError","","","","util::asm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","util::error","","","","","","","","","","","","","","","","","","","","","util::error::BfError","","","","util::math","","util::run",""],"d":["","","","","","","","","","","","","","","","","An x64 Assembler. This is aliased here for backwards …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[14,14,0,0,14,14,0,0,0,0,0,24,25,26,27,0,0,0,0,0,0,0,28,28,3,2,28,3,2,3,0,0,28,0,28,3,2,3,28,3,2,0,0,2,2,3,2,0,2,2,2,3,2,2,28,3,2,28,3,2,28,3,2,2,2,14,14,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,24,25,26,27,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[[1,2]],[[1,2]],0,[1],[[]],[[]],[[]],[3],[[]],[[]],[[]],[[1,4]],[[1,4,5],6],0,[2,7],[[8,9],3],[[10,11],2],[[1,2]],[2,7],[2,7],[[2,3],6],0,0,0,[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[2,7]],[[2,7]],0,0,0,0,0,0,[[]],[[]],[[14,14],15],[[14,16],17],[[14,16],17],[18,14],[19,14],[20,14],[[]],[[]],[21],[[],22],[[],12],[[],12],[[],13],0,0,0,0,[[7,5],7],[[7,5],7],0,[23,6]],"p":[[6,"Assembler"],[3,"Runtime"],[3,"CompiledProgram"],[3,"Vec"],[15,"usize"],[6,"BfResult"],[15,"u8"],[3,"ExecutableBuffer"],[3,"AssemblyOffset"],[8,"Read"],[8,"Write"],[4,"Result"],[3,"TypeId"],[4,"BfError"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Assembler"],[3,"Error"],[3,"TryFromIntError"],[3,"Demand"],[3,"String"],[8,"RunFunction"],[13,"Bf"],[13,"TryFromInt"],[13,"Io"],[13,"Assembler"],[3,"LabelPair"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
