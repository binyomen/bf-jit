name: build

on:
  push:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        include:
        - os: ubuntu-latest
          rust: stable
          target: x86_64-unknown-linux-gnu
        - os: ubuntu-latest
          rust: nightly
          target: x86_64-unknown-linux-gnu
        - os: ubuntu-latest
          rust: beta
          target: x86_64-unknown-linux-gnu

        - os: macos-latest
          rust: stable
          target: x86_64-apple-darwin
        - os: macos-latest
          rust: nightly
          target: x86_64-apple-darwin
        - os: macos-latest
          rust: beta
          target: x86_64-apple-darwin

        - os: windows-latest
          rust: stable
          target: x86_64-pc-windows-msvc
        - os: windows-latest
          rust: nightly
          target: x86_64-pc-windows-msvc
        - os: windows-latest
          rust: beta
          target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3

    - name: Install ${{ matrix.rust }} rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}
        components: clippy
        override: true

    - name: Install cross
      run: cargo install cross

    - name: Debug build
      run: cross build --target ${{ matrix.target }} --all-features -vv

    - name: Release build
      run: cross build --target ${{ matrix.target }} --release --all-features -vv

    - name: Clippy
      run: cross clippy --target ${{ matrix.target }} --all-features -vv -- -D warnings

    - name: Clippy tests
      run: cross clippy --target ${{ matrix.target }} --all-features -vv --tests -- -D warnings

    - name: Clippy release
      run: cross clippy --target ${{ matrix.target }} --all-features -vv --release -- -D warnings

    - name: Test
      run: cross test --target ${{ matrix.target }} --all-features -vv

    - name: Generate benchmark data
      if: matrix.rust == 'stable'
      run: cross run --target ${{ matrix.target }} --release -vv

    - name: Add the benchmark data to the `bench-data` artifact
      if: matrix.rust == 'stable'
      uses: actions/upload-artifact@v3
      with:
        name: bench-data
        path: bench-data

  check-format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Install stable rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        components: rustfmt
        override: true

    - name: Check formatting
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: -v -- --check

  generate-docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Install stable rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

    - name: Generate docs
      uses: actions-rs/cargo@v1
      with:
        command: doc
        args: --no-deps --document-private-items

    - name: Add the docs to the `docs` artifact
      uses: actions/upload-artifact@v3
      with:
        name: docs
        path: target/doc

  generate-plots:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v3

    - name: Download benchmark data
      uses: actions/download-artifact@v3
      with:
        name: bench-data
        path: bench-data

    - name: Install python dependencies
      run: |
        python -m venv .venv
        source .venv/bin/activate
        pip install -r requirements.txt

    - name: Generate plots
      run: ./plot.py

    - name: Add the plots to the `plots` artifact
      uses: actions/upload-artifact@v3
      with:
        name: plots
        path: plots

  publish-site:
    runs-on: ubuntu-latest
    needs: [build, check-format, generate-docs, generate-plots]
    steps:
    - name: Download docs
      uses: actions/download-artifact@v3
      with:
        name: docs
        path: site

    - name: Download plots
      uses: actions/download-artifact@v3
      with:
        name: plots
        path: site/img

    - name: Publish to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: site
